Signin:
 /* <div>
      {user ? (
        <button onClick={signOut}>Sign Out</button>
      ) : (
        
      )} */

    /* <CustomModal visible={showModal} showModal={showModal} setShowModal={setShowModal} title={"Login"}> */

    //   /* </CustomModal> */
    //   /* Login with Phone Number or Anonymous with Metamask
    //         - 1 to 1 Chat  */

    //   /* <button onClick={()=>setUser(false)}>Sign Out</button> */
    //   {/* <label>User email : </label>
    //         <input email="useremail" placeholder='Enter your email:' />
    //         <label>User  : </label>
    //         <input email="useremail" placeholder='Enter your email:' /> */}
    //   {/* <input email="userGmail" type="text" placeholder='enter your gmail'>Gmail:</input> */}
    // </div>
    //


    //liveChat
    
                {/* src/Assets/dp1.jpeg */}
                {/* <div className="container darker">
                <img
                  src="https://img.freepik.com/free-photo/close-up-young-successful-man-smiling-camera-standing-casual-outfit-against-blue-background_1258-66609.jpg?w=2000"
                  alt="Avatar"
                  className="right"
                  style={{ width: "100%" }}
                />
                <p>fine. Thanks for asking!</p>
                <span className="time-left">11:01</span>
              </div> */}
                {/* <img src={dp}/> */}

SideBar

import { getAuth } from "firebase/auth";
import {
  addDoc,
  collection,
  doc,
  getDoc,
  onSnapshot,
  orderBy,
  query,
  serverTimestamp,
  setDoc,
} from "firebase/firestore";
import React, { useContext, useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { messageContext } from "../../App";
import { auth, db } from "../../firebase";
import { IMAGES } from "../Utillities/Images";
import "./styles.css";

function SideBar() {
  const [users, setUsers] = useState([]);
  const {
    activeUser,
    setActiveUser,
    chatDisplay,
    message,
    setMessage,
    setChatDisplay,
    recieverDetails,
    setRecieverDetails,
    actualDbId,
    setActualDbId,
  } = useContext(messageContext);
  let senderUserID;

  useEffect(() => {
    console.log("activeUser iopi", activeUser?.name);
  }, [activeUser]);

  useEffect(() => {
    const q = query(collection(db, "users"), orderBy("createdAt"));
    const unsubscribe = onSnapshot(q, (QuerySnapshot) => {
      let users = [];
      console.log("<>snapshot<>", QuerySnapshot);

      QuerySnapshot.forEach((doc) => {
        console.log("<>snapshot foreach<>", doc, doc.id, typeof doc);
        users.push({ ...doc.data() });
        console.log("messages<>: ", users);
      });
      setUsers(users);
    });
    console.log("actualDbId in useEffectMount(sidebar) :", actualDbId);
    return () => unsubscribe();
  }, []);

  const receiverSelected = async (user) => {
    setRecieverDetails(user);
    setChatDisplay(true);
    console.log("recieverDetails:", recieverDetails, "user: ", actualDbId, " ");
    const { uid, name } = user;
    // senderUser = auth.currentUser;
    console.log("user reciever <><><><>", name);
    const senderUid = auth.currentUser.uid,
      recieverUid = uid;
    senderUserID = senderUid;
    // setActualDbId(recieverUid+senderUid);

    const senderDetails = users?.find((user) => user.uid == senderUid);
    setActiveUser(senderDetails);

    console.log(
      "auth.currentUser :",
      auth.currentUser.uid,
      auth.currentUser,
      senderDetails
    );
    console.log("uid2 name ", user);

    const existingContact12 = await getDoc(
      doc(db, "chats", `${recieverUid + senderUid}`)
    );
    const existingContact21 = await getDoc(
      doc(db, "chats", `${senderUid + recieverUid}`)
    );
    //
    console.log("actualDbId:", actualDbId);

    // else setActualDbId(recieverUid + senderUid);
    const dbExists = existingContact12.exists() || existingContact21.exists();
    !dbExists && setActualDbId(recieverUid + senderUid);

    console.log("actualDbId: i", actualDbId);

    if (!dbExists) {
      console.log("actualDbId: if code ", actualDbId);
      await setDoc(doc(db, "chats", actualDbId), {
        uid: actualDbId,
        senderUid,
        recieverUid,
        senderDetails,
        recieverDetails: user,
        createdAt: serverTimestamp(),
        messages: [],
      });
    } else {
      if (!actualDbId) {
        if (existingContact21.exists()) setActualDbId(senderUid + recieverUid);
        else setActualDbId(recieverUid + senderUid);
      }
      // setActualDbId();
      console.log("contact exists", actualDbId);
    }
  };
  return (
    <>
      <div class="w-25 p-3 ">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
          <img class="avatar" src={IMAGES.default} alt="Avatar" />
          {"  "}
          <h6>
            {
              users?.find((user) => {
                return user.uid == auth.currentUser.uid;
              })?.name
            }
          </h6>
          {/* wordWrap:break-word */}

          <button
            class="navbar-toggler"
            type="button"
            data-toggle="collapse"
            data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto"></ul>
          </div>
        </nav>
        <input
          class="form-control mr-sm-2"
          type="search"
          placeholder="Search"
          aria-label="Search"
        />
        {users?.map((user) => {
          if (user.uid == auth.currentUser.uid) return;
          return (
            <div className="user" key={user.uid} onClick={() => receiverSelected(user)}>
              <img className="avatar" src={IMAGES.default} />
              {user?.name}
            </div>
          );
        })}
      </div>
    </>
  );
}
export default SideBar;

_redirects


import { createUserWithEmailAndPassword } from "firebase/auth";
import { addDoc, collection, doc, serverTimestamp, setDoc } from "firebase/firestore";
import React, { useContext, useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { messageContext } from "../../App";
import { auth, db } from "../../firebase";
import { NAME_ERROR_STRING } from "../ConstantStrings";
import { errorDisplay } from "../Utillities/errorDisplay";
import { IMAGES } from "../Utillities/Images";

function SignUp() {
  const [name, setName] = useState("");
  const navigate = useNavigate();
  const [err, setErr] = useState(false);
  const [loading, setLoading] = useState(false);

  const {
    errorMessage,
    setErrorMessage,
    email,
    setEmail,
    password,
    setPassword,
  } = useContext(messageContext);

  useEffect(() => {
    setName("");
    setEmail("");
    setPassword("");
    setErrorMessage("");
  }, []);


  const handleSubmit = async (e) => {

    const signUpEmailPassword = async (e) => {
      const signupEmail = email;
      const signupPassword = password;
      try {
        console.log("name<><><>", name);
        if (name == "") throw new Error(NAME_ERROR_STRING);

        console.log(" Sign up in  ", email, password);
        const userCredential = await createUserWithEmailAndPassword(
          auth,
          signupEmail,
          signupPassword
        );
        console.log("userCredential signup", userCredential);
        const { uid } = auth.currentUser;
        await setDoc(doc(db, "users", uid), {
          uid,
          name,
          email,
          avatar: IMAGES.DP1, //random array dp generator
          createdAt: serverTimestamp(),
          // details: {uid,email,name,avatar,}
        });
        console.log("name ", name, errorMessage);
        navigate(`/LiveChat/${auth.currentUser.uid}`);
      } catch (error) {
        console.log("error ", error);
        errorDisplay(error, email, setErrorMessage);
        // showLoginError(error);
      }
    };
    return (
      <div>
        <h3>Please Register...</h3>
          <input
            id="userName"
            value={name}
            onChange={(e) => {
              setName(e.target.value);
            }}
            type="text"
            placeholder="Enter Name..."
            required
          // onKeyDown={handleEnter}
          />
          <input
            id="userEmail"
            value={email}
            onChange={(e) => {
              setEmail(e.target.value);
            }}
            type="text"
            placeholder="Enter email..."
          // onKeyDown={handleEnter}
          />
          <input
            id="userPassword"
            value={password}
            onChange={(e) => {
              setPassword(e.target.value);
            }}
            type="password"
            placeholder="Enter Password..."
          // onKeyDown={handleEnter}
          />
          <br />
          {/* 
        <input className="input" required style={{ display: "none" }} type="file" id="file" />
        <button><label className="label" htmlFor="file">
          {/* <img className="img" src={Add} alt="" /> */}
          {/* Add your profile photo */}
          {/* </label></button> */}
          <br /><br />
          <button onClick={signUpEmailPassword}>Sign Up</button>
          <button onClick={() => navigate("/SignIn")}>Existing User, SignIn</button>
          <p style={{ color: "red" }}>{errorMessage}</p>
      </div>
    );
  }
}
export default SignUp;

// setLoading(true);
// e.preventDefault();
// const displayName = e.target[0].value;
// const email = e.target[1].value;
// const password = e.target[2].value;
// const file = e.target[3].files[0];

// try {

//   const res = await createUserWithEmailAndPassword(auth, email, password);
//   const date = new Date().getTime();
//   // const storageRef = ref(storage, `${displayName + date}`);

//   await uploadBytesResumable(storageRef, file).then(() => {
//     getDownloadURL(storageRef).then(async (downloadURL) => {
//       try {
//         //Update profile
//         await updateProfile(res.user, {
//           displayName,
//           photoURL: downloadURL,
//         });
//         //create user on firestore
//         await setDoc(doc(db, "users", res.user.uid), {
//           uid: res.user.uid,
//           displayName,
//           email,
//           photoURL: downloadURL,
//         });

//         await setDoc(doc(db, "userChannels", res.user.uid), {});
//         // await setDoc(doc(db, "channels", res.user.uid))
//         await setDoc(doc(db, "userChats", res.user.uid), {});
//         navigate("/");
//       } catch (err) {
//         console.log(err);
//         setErr(true);
//         setLoading(false);
//       }
//     });
//   });
// } catch (err) {
//   setErr(true);
//   setLoading(false);
// }
// 
// // useEffect(()=>{
// //     if(name == "") {
// //         setErrorMessage("Invalid Name")
// //         // throw new Error("Invalid Name");        }
// // },[name])
